name: "Release"

on:
  push:
    tags: ['v*']

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false
  build-installers:
    needs: create-release
    name: Build and upload offline installers.
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [2.7, 3.6]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install build dependencies.
      run: |
        python -m pip install --upgrade pip setuptools
        python -m pip install wheel
    - name: Build off-line installer
      id: build
      shell: bash
      run: |
        output=$(python offline_installer/build.py)
        echo "::set-output name=file_name::$output"
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.url }}
        asset_path: ./dist/${{ steps.build.outputs.file_name }}
        asset_name: ${{ steps.build.outputs.file_name }}
        asset_content_type: application/zip
    - id: tag_version
      shell: bash
      run: |
        output=$(${{ github.ref }} | cut -c2-)
        echo "::set-output name=version::$output"
    - name: Upload windows package to S3
      id: s3
      if: matrix.os == 'windows-latest' && matrix.python-version == '2.7'
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read
      env:
        AWS_S3_BUCKET: swimlane-builds
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: 'us-west-2'
        SOURCE_DIR: ./dist/${{ steps.build.outputs.file_name }}
        DEST_DIR: python_driver/${{ steps.tag_version.outputs.version }}

#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip setuptools
#        python -m pip install -U -r requirements.txt
#    - name: Build
#      run: python setup.py sdist bdist_wheel
#    - name: Publish PyPi
#      env:
#        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
#        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
#      run: twine upload dist/*

